@page "/login"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using BlogApp.Domain.Dtos
@using MudBlazor

<MudSnackbarProvider />

<EditForm Model="loginModel">
    <MudCard Style="max-width: 400px; margin: auto; padding: 20px;">
        <MudCardContent>
            <MudText Typo="Typo.h5" Align="Align.Center">Login</MudText>
            <MudTextField @bind-Value="loginModel.Username" Label="Username" Required="true" />
            <MudTextField @bind-Value="loginModel.Password" Label="Password" InputType="InputType.Password" Required="true" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(async () => await HandleLogin())" FullWidth="true">Login</MudButton>
        </MudCardActions>
        <MudItem>
            <div style="text-align: center;">
                No account?
                <MudLink OnClick="GoToRegister" Underline="Underline.Always">Register</MudLink>
            </div>
        </MudItem>
    </MudCard>
</EditForm>


@code {
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private ISnackbar _snackbar { get; set; }
    [Inject] HttpClient _httpClient { get; set; }
    [Inject] ILocalStorageService _localStorage { get; set; }

    private LoginRequestDto loginModel = new();

    private async Task HandleLogin()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                await _localStorage.SetItemAsync("authToken", result);
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                var result = await response.Content.ReadFromJsonAsync<List<string>>() ?? new List<string> { "Login failed." };
                foreach (var error in result)
                {
                    _snackbar.Add(error, Severity.Error);
                }
            }
        }
        catch (HttpRequestException)
        {
            _snackbar.Add("Could not reach server. Ensure the API is running.", Severity.Error);
        }
        catch
        {
            _snackbar.Add("An unexpected error occurred during login.", Severity.Error);
        }
    }

    private void GoToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
}