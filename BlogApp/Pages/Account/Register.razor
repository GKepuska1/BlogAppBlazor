@page "/register"

@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using BlogApp.Domain.Dtos
@using MudBlazor

<MudSnackbarProvider />

<EditForm Model="registerModel">
    <MudCard Style="max-width: 400px; margin: auto; padding: 20px;">
        <MudCardContent>
            <MudText Typo="Typo.h5" Align="Align.Center">Register</MudText>
            <MudTextField @bind-Value="registerModel.Username" Label="Username" Required="true" />
            <MudTextField @bind-Value="registerModel.Password" Label="Password" InputType="InputType.Password" Required="true" />
            <MudTextField @bind-Value="registerModel.Firstname" Label="Firstname" Required="true" />
            <MudTextField @bind-Value="registerModel.Lastname" Label="Lastname" Required="true" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(async () => await HandleRegister())" FullWidth="true">Register</MudButton>
        </MudCardActions>
        <MudItem>
            <div style="text-align: center;">
                Already have an account?
                <MudLink OnClick="GoToLogin" Underline="Underline.Always">Login</MudLink>
            </div>
        </MudItem>
    </MudCard>
</EditForm>




@code {
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private ISnackbar _snackbar { get; set; }
    [Inject] HttpClient _httpClient { get; set; }
    [Inject] ILocalStorageService _localStorage { get; set; }

    private RegisterRequestDto registerModel = new();

    private async Task HandleRegister()
    {
        var response = await _httpClient.PostAsJsonAsync("api/auth/register", registerModel);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            await _localStorage.SetItemAsync("authToken", result);
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<List<string>>();
            foreach (var error in result)
            {
                _snackbar.Add(error, Severity.Error);
            }
        }
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}