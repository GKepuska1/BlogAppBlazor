@using Blazored.LocalStorage
@using BlogApp.Domain.Dtos
@using BlogApp.Pages.Common
@using MudBlazor
@using System.Net.Http.Headers

<MudContainer Style="width:50%">
    @if (loadingSubmit)
    {
        <Spinner></Spinner>
    }
    else
    {
        <MudPaper Class="pa-4">
            <MudForm @ref="form" Validated="OnValidSubmit">
                <MudTextField @bind-Value="commentContent" Label="Content" For="@(() => commentContent)" Required="true"
                              Lines="5" MultiLine="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitForm">Submit</MudButton>
            </MudForm>
        </MudPaper>
    }
</MudContainer>

@code {


    [Inject] private HttpClient _httpClient { get; set; }
    [Inject] ILocalStorageService _localStorage { get; set; }
    [Inject] private ISnackbar _snackbar { get; set; }

    [Parameter] public EventCallback OnTrigger { get; set; }
    [Parameter] public int BlogId { get; set; }

    private MudForm form;
    private string commentContent = string.Empty;
    private bool loadingSubmit = false;


    private async Task CreateCommentPostAsync()
    {
        loadingSubmit = true;
        var newComment = new CommentDtoCreate
            {
                Content = commentContent,
            };

        var request = new HttpRequestMessage(HttpMethod.Post, $"/api/comment/{BlogId}")
            {
                Content = JsonContent.Create(newComment)
            };

        var token = await _localStorage.GetItemAsync<string>("authToken");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _httpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            commentContent = string.Empty;
            await OnTrigger.InvokeAsync();
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<List<string>>();
            foreach (var error in result)
            {
                _snackbar.Add(error, Severity.Error);
            }
        }
        loadingSubmit = false;
    }

    private async Task SubmitForm()
    {
        await form.Validate();
        if (form.IsValid)
        {
            await CreateCommentPostAsync();
        }
    }
}
