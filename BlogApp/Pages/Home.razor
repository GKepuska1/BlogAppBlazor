@page "/"

@inject AuthenticationStateProvider AuthenticationStateProvider
@using Blazored.LocalStorage
@using BlogApp.Domain.Dtos
@using BlogApp.Pages.Blogs
@using BlogApp.Pages.Common
@using BlogApp.Pages.Search
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MudBlazor
@using System.Net.Http.Headers

<PageTitle>Home</PageTitle>


@if (user == null)
{
    <Spinner></Spinner>
}
else
{
    <MudPaper Elevation="0" Height="800px" Width="100%" Style="display: flex; flex-direction: column; overflow-y: auto;">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <Search OnTrigger="SearchBlogs"></Search>
            <MudContainer MaxWidth="MaxWidth.Small">
                <CreateBlog OnTrigger="(async () => await RefreshParent())"></CreateBlog>
            </MudContainer>

            <MudPaper Elevation="0" Height="400px" Width="100%">
                <MudContainer>
                    @foreach (var blog in _blogs)
                    {
                        <MudPaper Elevation="0" Class="pa-3" Style="width: 100%;">
                            <BlogCard BlogDtoData="blog" OnEditSave="(async () => await RefreshParent())"></BlogCard>
                        </MudPaper>
                    }
                </MudContainer>

                <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center" Class="mt-4">
                    <MudItem>
                        <MudPagination @bind-Page="_currentPage"
                                       PageSize="@_pageSize"
                                       TotalItems="@_blogs.Count"
                                       Count="@_totalPages"
                                       SelectedChanged="@(async (int x) => await HandlePageChanged(x))">
                        </MudPagination>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudContainer>
    </MudPaper>
}

@code {

    [Inject] HttpClient _httpClient { get; set; }
    [Inject] ILocalStorageService _localStorage { get; set; }

    private ClaimsPrincipal user;
    private List<BlogDto> _blogs;
    private int _totalBlogs;

    private int _currentPage = 1;
    private int _pageSize = 3;
    private int _totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        await GetBlogsAsync();
    }

    private async Task GetBlogsAsync()
    {
        var token = await _localStorage.GetItemAsync<string>("authToken");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _httpClient.GetAsync($"api/blog/{_currentPage}/{_pageSize}");
        if (response.IsSuccessStatusCode)
        {
            _blogs = await response.Content.ReadFromJsonAsync<List<BlogDto>>();
        }

        response = await _httpClient.GetAsync($"api/blog/total");
        if (response.IsSuccessStatusCode)
        {
            _totalBlogs = await response.Content.ReadFromJsonAsync<int>();
        }
        _totalPages = (_totalBlogs + _pageSize - 1) / _pageSize;
    }

    private async Task RefreshParent()
    {
        await GetBlogsAsync();
        StateHasChanged();
    }

    private async Task SearchBlogs(string term)
    {
        var token = await _localStorage.GetItemAsync<string>("authToken");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        if (string.IsNullOrEmpty(term))
        {
            await GetBlogsAsync();
        }
        else
        {
            var response = await _httpClient.GetAsync($"api/blog/search/{term}");
            if (response.IsSuccessStatusCode)
            {
                _blogs = await response.Content.ReadFromJsonAsync<List<BlogDto>>();
            }
        }
    }

    private async Task HandlePageChanged(int page)
    {
        _currentPage = page;
        await GetBlogsAsync();
    }
}