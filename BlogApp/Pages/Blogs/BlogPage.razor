@page "/blog/{Id:int}"
@using Blazored.LocalStorage
@using BlogApp.Domain.Dtos
@using BlogApp.Pages.Comments
@using BlogApp.Pages.Common
@using MudBlazor
@using System.Net.Http.Headers

<MudLink Href="/">Go Back</MudLink>

@if (loading)
{
    <Spinner></Spinner>
}
else if (error)
{
    <p>Blog post not found</p>
}
else
{
    <BlogCard BlogDtoData="BlogDto" RefreshParent="GoHome" OnEditSave="(async () =>  await RefreshParent())"></BlogCard>
    <CreateComment BlogId="BlogDto.Id" OnTrigger="(async () =>  await RefreshParent())"></CreateComment>
    @foreach (var comment in BlogDto.Comments)
    {
        <Comment CommentDto="comment"></Comment>
    }
}

@code {
    public bool loading = true;
    public bool error = false;
    public BlogDto BlogDto { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Inject] private HttpClient _httpClient { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private ILocalStorageService _localStorage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetBlogPost();
    }

    private async Task GetBlogPost()
    {
        try
        {
            var token = await _localStorage.GetItemAsync<string>("authToken");
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await _httpClient.GetAsync($"api/blog/{Id}");
            BlogDto = await response.Content.ReadFromJsonAsync<BlogDto>();
        }
        catch
        {
            error = true;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task GetBlogComments()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/api/comment/{BlogDto.Id}");

            var token = await _localStorage.GetItemAsync<string>("authToken");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await _httpClient.SendAsync(request);
            BlogDto.Comments = await response.Content.ReadFromJsonAsync<List<CommentDto>>();
        }
        catch
        {
            error = true;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task RefreshParent()
    {
        await GetBlogComments();
        StateHasChanged();
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }
}
